/**
 * 2GIS Playable Ad - Main Entry Point
 * 
 * Constitution: .specify/memory/constitution.md
 * Brief: .specify/memory/specs/playable-core/integrations/brief.md
 * 
 * Budgets:
 * - ZIP ‚â§ 5 MB
 * - 60 FPS on mid-tier Android/iOS
 * - TTFI ‚â§ 300 ms
 * - 0 external requests
 * - web-fonts = 0
 */

import playableSDK from './sdk-wrapper';
import ThreeRenderer from './renderer/ThreeRenderer';
import MapScene from './game/MapScene';

console.log('üöÄ 2GIS Playable Ad - Starting...');
console.log(`üì± Network: ${import.meta.env.VITE_AD_NETWORK}`);
console.log(`üìê Orientation: ${import.meta.env.VITE_ORIENTATION}`);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ (Task 19)
window.addEventListener('error', (event) => {
  console.error('Runtime error:', event.message);
  playableSDK.trackCustomEvent('error', { 
    code: 'runtime_error', 
    detail: event.message 
  });
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('Unhandled promise rejection:', event.reason);
  playableSDK.trackCustomEvent('error', { 
    code: 'unhandled_promise', 
    detail: String(event.reason) 
  });
});

// Main initialization
async function init() {
  try {
    console.log('üéÆ Initializing game...');
    
    // Task 02 - SDK Integration ‚úÖ
    playableSDK.init((width, height) => {
      console.log(`üìê Container size: ${width}x${height}`);
      console.log(`üì± Landscape: ${playableSDK.isLandscape}`);
      
      initRenderer(width, height);
    });
    
    // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ SDK –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è)
    // –í prod —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ, —Ç.–∫. SDK –≤—Å–µ–≥–¥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–µ—Ç—è—Ö
    setTimeout(() => {
      if (!playableSDK.ready) {
        console.warn('[Fallback] SDK not ready after 1s, initializing manually for local testing');
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º document.documentElement –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ viewport
        const width = document.documentElement.clientWidth || window.innerWidth;
        const height = document.documentElement.clientHeight || window.innerHeight;
        initRenderer(width, height);
      }
    }, 1000);
    
  } catch (error) {
    console.error('‚ùå Initialization failed:', error);
    playableSDK.trackCustomEvent('error', { 
      code: 'init_error', 
      detail: String(error) 
    });
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Three.js —Ä–µ–Ω–¥–µ—Ä–µ—Ä–∞
 */
async function initRenderer(width: number, height: number) {
  try {
    // Task 08 - Three.js Renderer ‚úÖ
    const canvas = document.getElementById('game-canvas') as HTMLCanvasElement;
    if (!canvas) {
      throw new Error('Canvas element not found');
    }

      const renderer = new ThreeRenderer();
      renderer.init(canvas, width, height);

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ canvas
      const actualWidth = document.documentElement.clientWidth || window.innerWidth;
      const actualHeight = document.documentElement.clientHeight || window.innerHeight;
      if (actualWidth !== width || actualHeight !== height) {
        console.warn(`[Init] Size mismatch: requested ${width}x${height}, actual ${actualWidth}x${actualHeight}. Fixing...`);
        renderer.resize(actualWidth, actualHeight);
      }

      // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã –∫–∞—Ä—Ç—ã (3 –º–∞—Ä—à—Ä—É—Ç–∞)
      const map = new MapScene(renderer);
      await map.init(document.getElementById('app') as HTMLElement);
      map.resize(); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ –ø–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      map.onSelect((route) => {
        console.log('[Map] Selected route:', route);
        // TODO: –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ –º–∞—à–∏–Ω–∫–∏ (Task 10), –Ω–∞—á–∞—Ç—å –æ—Ç—Å—á—ë—Ç –≤—Ä–µ–º–µ–Ω–∏, –∏ –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî level_complete
      });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ resize —á–µ—Ä–µ–∑ SDK
    (window as any).__renderer = renderer; // –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ SDK wrapper

    // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º window.resize
    // –í prod SDK —Å–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç resize events, –Ω–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω fallback
    let resizeTimeout: number;
    window.addEventListener('resize', () => {
      // Debounce –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      clearTimeout(resizeTimeout);
      resizeTimeout = window.setTimeout(() => {
        const newWidth = document.documentElement.clientWidth || window.innerWidth;
        const newHeight = document.documentElement.clientHeight || window.innerHeight;
        console.log(`[Window] Resize detected: ${newWidth}x${newHeight}`);
        renderer.resize(newWidth, newHeight);
        map.resize(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ–Ω —Å—Ü–µ–Ω—ã
      }, 100) as unknown as number;
    });
    
    console.log('[Resize] Window resize listener attached (fallback for local testing)');

    // –ó–∞–ø—É—Å–∫ render loop
    renderer.startRenderLoop(() => {
      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (–∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π –∏ —Ç. –ø.)
      map.update();
    });
    
    // –°–∫—Ä—ã—Ç—å –ø—Ä–µ–ª–æ–∞–¥–µ—Ä –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const loader = document.getElementById('loader');
    if (loader) {
      loader.classList.add('hidden');
      console.log('[UI] Loader hidden');
    }
    
    // TODO: Task 05 - Show tutorial screen
    console.log('TODO: Show tutorial screen');
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—Å—Å–µ—Ç–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É)
    setTimeout(() => {
      // Task 16 - Event game_start ‚úÖ
      // start() –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç trackCustomEvent('game_start')
      if (playableSDK.ready) {
        playableSDK.start();
      }
      console.log('‚úÖ Game started');
    }, 500);
    
  } catch (error) {
    console.error('‚ùå Renderer initialization failed:', error);
    playableSDK.trackCustomEvent('error', { 
      code: 'renderer_init_error', 
      detail: String(error) 
    });
  }
}

// Start when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', init);
} else {
  init();
}

// Expose for debugging (only in dev)
if (import.meta.env.DEV) {
  (window as any).__PLAYABLE_DEBUG__ = {
    network: import.meta.env.VITE_AD_NETWORK,
    orientation: import.meta.env.VITE_ORIENTATION,
  };
}
    
